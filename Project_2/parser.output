Grammar

    0 $accept: function $end

    1 function: function_header optional_variable body

    2 function_header: FUNCTION IDENTIFIER parameter_ RETURNS type ';'
    3                | error ';'

    4 optional_variable: optional_variable variable
    5                  | error ';'
    6                  | ε

    7 variable: IDENTIFIER ':' type IS statement_

    8 parameter_: parameter_ ',' parameter
    9           | parameter
   10           | ε

   11 parameter: IDENTIFIER ':' type

   12 type: INTEGER
   13     | REAL
   14     | BOOLEAN

   15 body: BEGIN_ statement_ END ';'

   16 statement_: statement ';'
   17           | error ';'

   18 statement: expression
   19          | REDUCE operator reduction_ ENDREDUCE
   20          | IF expression THEN statement_ ELSE statement_ ENDIF
   21          | CASE expression IS case_ OTHERS ARROW statement_ ENDCASE

   22 operator: ADDOP
   23         | MULOP

   24 case_: case_ case
   25      | ε

   26 case: WHEN INT_LITERAL ARROW statement_

   27 reduction_: reduction_ statement_
   28           | ε

   29 expression: expression OROP binary_op
   30           | binary_op

   31 binary_op: binary_op ANDOP relation
   32          | relation

   33 relation: relation RELOP term
   34         | term

   35 term: term ADDOP factor
   36     | factor

   37 factor: factor MULOP exp_op
   38       | factor REMOP exp_op
   39       | exp_op

   40 exp_op: primary EXPOP exp_op
   41       | unary_op

   42 unary_op: unary_op NOTOP primary
   43         | primary

   44 primary: '(' expression ')'
   45        | INT_LITERAL
   46        | REAL_LITERAL
   47        | BOOL_LITERAL
   48        | IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 44
    ')' (41) 44
    ',' (44) 8
    ':' (58) 7 11
    ';' (59) 2 3 5 15 16 17
    error (256) 3 5 17
    IDENTIFIER (258) 2 7 11 48
    INT_LITERAL (259) 26 45
    REAL_LITERAL (260) 46
    BOOL_LITERAL (261) 47
    ADDOP (262) 22 35
    MULOP (263) 23 37
    REMOP (264) 38
    EXPOP (265) 40
    OROP (266) 29
    ANDOP (267) 31
    RELOP (268) 33
    NOTOP (269) 42
    INTEGER (270) 12
    REAL (271) 13
    BOOLEAN (272) 14
    BEGIN_ (273) 15
    END (274) 15
    FUNCTION (275) 2
    IS (276) 7 21
    RETURNS (277) 2
    REDUCE (278) 19
    ENDREDUCE (279) 19
    IF (280) 20
    THEN (281) 20
    ELSE (282) 20
    ENDIF (283) 20
    CASE (284) 21
    WHEN (285) 26
    ARROW (286) 21 26
    OTHERS (287) 21
    ENDCASE (288) 21


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    function (40)
        on left: 1
        on right: 0
    function_header (41)
        on left: 2 3
        on right: 1
    optional_variable (42)
        on left: 4 5 6
        on right: 1 4
    variable (43)
        on left: 7
        on right: 4
    parameter_ (44)
        on left: 8 9 10
        on right: 2 8
    parameter (45)
        on left: 11
        on right: 8 9
    type (46)
        on left: 12 13 14
        on right: 2 7 11
    body (47)
        on left: 15
        on right: 1
    statement_ (48)
        on left: 16 17
        on right: 7 15 20 21 26 27
    statement (49)
        on left: 18 19 20 21
        on right: 16
    operator (50)
        on left: 22 23
        on right: 19
    case_ (51)
        on left: 24 25
        on right: 21 24
    case (52)
        on left: 26
        on right: 24
    reduction_ (53)
        on left: 27 28
        on right: 19 27
    expression (54)
        on left: 29 30
        on right: 18 20 21 29 44
    binary_op (55)
        on left: 31 32
        on right: 29 30 31
    relation (56)
        on left: 33 34
        on right: 31 32 33
    term (57)
        on left: 35 36
        on right: 33 34 35
    factor (58)
        on left: 37 38 39
        on right: 35 36 37 38
    exp_op (59)
        on left: 40 41
        on right: 37 38 39 40
    unary_op (60)
        on left: 42 43
        on right: 41 42
    primary (61)
        on left: 44 45 46 47 48
        on right: 40 42 43


State 0

    0 $accept: • function $end

    error     shift, and go to state 1
    FUNCTION  shift, and go to state 2

    function         go to state 3
    function_header  go to state 4


State 1

    3 function_header: error • ';'

    ';'  shift, and go to state 5


State 2

    2 function_header: FUNCTION • IDENTIFIER parameter_ RETURNS type ';'

    IDENTIFIER  shift, and go to state 6


State 3

    0 $accept: function • $end

    $end  shift, and go to state 7


State 4

    1 function: function_header • optional_variable body

    error  shift, and go to state 8

    IDENTIFIER  reduce using rule 6 (optional_variable)
    BEGIN_      reduce using rule 6 (optional_variable)

    optional_variable  go to state 9


State 5

    3 function_header: error ';' •

    $default  reduce using rule 3 (function_header)


State 6

    2 function_header: FUNCTION IDENTIFIER • parameter_ RETURNS type ';'

    IDENTIFIER  shift, and go to state 10

    $default  reduce using rule 10 (parameter_)

    parameter_  go to state 11
    parameter   go to state 12


State 7

    0 $accept: function $end •

    $default  accept


State 8

    5 optional_variable: error • ';'

    ';'  shift, and go to state 13


State 9

    1 function: function_header optional_variable • body
    4 optional_variable: optional_variable • variable

    IDENTIFIER  shift, and go to state 14
    BEGIN_      shift, and go to state 15

    variable  go to state 16
    body      go to state 17


State 10

   11 parameter: IDENTIFIER • ':' type

    ':'  shift, and go to state 18


State 11

    2 function_header: FUNCTION IDENTIFIER parameter_ • RETURNS type ';'
    8 parameter_: parameter_ • ',' parameter

    RETURNS  shift, and go to state 19
    ','      shift, and go to state 20


State 12

    9 parameter_: parameter •

    $default  reduce using rule 9 (parameter_)


State 13

    5 optional_variable: error ';' •

    $default  reduce using rule 5 (optional_variable)


State 14

    7 variable: IDENTIFIER • ':' type IS statement_

    ':'  shift, and go to state 21


State 15

   15 body: BEGIN_ • statement_ END ';'

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    REDUCE        shift, and go to state 27
    IF            shift, and go to state 28
    CASE          shift, and go to state 29
    '('           shift, and go to state 30

    statement_  go to state 31
    statement   go to state 32
    expression  go to state 33
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 16

    4 optional_variable: optional_variable variable •

    $default  reduce using rule 4 (optional_variable)


State 17

    1 function: function_header optional_variable body •

    $default  reduce using rule 1 (function)


State 18

   11 parameter: IDENTIFIER ':' • type

    INTEGER  shift, and go to state 41
    REAL     shift, and go to state 42
    BOOLEAN  shift, and go to state 43

    type  go to state 44


State 19

    2 function_header: FUNCTION IDENTIFIER parameter_ RETURNS • type ';'

    INTEGER  shift, and go to state 41
    REAL     shift, and go to state 42
    BOOLEAN  shift, and go to state 43

    type  go to state 45


State 20

    8 parameter_: parameter_ ',' • parameter

    IDENTIFIER  shift, and go to state 10

    parameter  go to state 46


State 21

    7 variable: IDENTIFIER ':' • type IS statement_

    INTEGER  shift, and go to state 41
    REAL     shift, and go to state 42
    BOOLEAN  shift, and go to state 43

    type  go to state 47


State 22

   17 statement_: error • ';'

    ';'  shift, and go to state 48


State 23

   48 primary: IDENTIFIER •

    $default  reduce using rule 48 (primary)


State 24

   45 primary: INT_LITERAL •

    $default  reduce using rule 45 (primary)


State 25

   46 primary: REAL_LITERAL •

    $default  reduce using rule 46 (primary)


State 26

   47 primary: BOOL_LITERAL •

    $default  reduce using rule 47 (primary)


State 27

   19 statement: REDUCE • operator reduction_ ENDREDUCE

    ADDOP  shift, and go to state 49
    MULOP  shift, and go to state 50

    operator  go to state 51


State 28

   20 statement: IF • expression THEN statement_ ELSE statement_ ENDIF

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    expression  go to state 52
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 29

   21 statement: CASE • expression IS case_ OTHERS ARROW statement_ ENDCASE

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    expression  go to state 53
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 30

   44 primary: '(' • expression ')'

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    expression  go to state 54
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 31

   15 body: BEGIN_ statement_ • END ';'

    END  shift, and go to state 55


State 32

   16 statement_: statement • ';'

    ';'  shift, and go to state 56


State 33

   18 statement: expression •
   29 expression: expression • OROP binary_op

    OROP  shift, and go to state 57

    $default  reduce using rule 18 (statement)


State 34

   30 expression: binary_op •
   31 binary_op: binary_op • ANDOP relation

    ANDOP  shift, and go to state 58

    $default  reduce using rule 30 (expression)


State 35

   32 binary_op: relation •
   33 relation: relation • RELOP term

    RELOP  shift, and go to state 59

    $default  reduce using rule 32 (binary_op)


State 36

   34 relation: term •
   35 term: term • ADDOP factor

    ADDOP  shift, and go to state 60

    $default  reduce using rule 34 (relation)


State 37

   36 term: factor •
   37 factor: factor • MULOP exp_op
   38       | factor • REMOP exp_op

    MULOP  shift, and go to state 61
    REMOP  shift, and go to state 62

    $default  reduce using rule 36 (term)


State 38

   39 factor: exp_op •

    $default  reduce using rule 39 (factor)


State 39

   41 exp_op: unary_op •
   42 unary_op: unary_op • NOTOP primary

    NOTOP  shift, and go to state 63

    $default  reduce using rule 41 (exp_op)


State 40

   40 exp_op: primary • EXPOP exp_op
   43 unary_op: primary •

    EXPOP  shift, and go to state 64

    $default  reduce using rule 43 (unary_op)


State 41

   12 type: INTEGER •

    $default  reduce using rule 12 (type)


State 42

   13 type: REAL •

    $default  reduce using rule 13 (type)


State 43

   14 type: BOOLEAN •

    $default  reduce using rule 14 (type)


State 44

   11 parameter: IDENTIFIER ':' type •

    $default  reduce using rule 11 (parameter)


State 45

    2 function_header: FUNCTION IDENTIFIER parameter_ RETURNS type • ';'

    ';'  shift, and go to state 65


State 46

    8 parameter_: parameter_ ',' parameter •

    $default  reduce using rule 8 (parameter_)


State 47

    7 variable: IDENTIFIER ':' type • IS statement_

    IS  shift, and go to state 66


State 48

   17 statement_: error ';' •

    $default  reduce using rule 17 (statement_)


State 49

   22 operator: ADDOP •

    $default  reduce using rule 22 (operator)


State 50

   23 operator: MULOP •

    $default  reduce using rule 23 (operator)


State 51

   19 statement: REDUCE operator • reduction_ ENDREDUCE

    $default  reduce using rule 28 (reduction_)

    reduction_  go to state 67


State 52

   20 statement: IF expression • THEN statement_ ELSE statement_ ENDIF
   29 expression: expression • OROP binary_op

    OROP  shift, and go to state 57
    THEN  shift, and go to state 68


State 53

   21 statement: CASE expression • IS case_ OTHERS ARROW statement_ ENDCASE
   29 expression: expression • OROP binary_op

    OROP  shift, and go to state 57
    IS    shift, and go to state 69


State 54

   29 expression: expression • OROP binary_op
   44 primary: '(' expression • ')'

    OROP  shift, and go to state 57
    ')'   shift, and go to state 70


State 55

   15 body: BEGIN_ statement_ END • ';'

    ';'  shift, and go to state 71


State 56

   16 statement_: statement ';' •

    $default  reduce using rule 16 (statement_)


State 57

   29 expression: expression OROP • binary_op

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    binary_op  go to state 72
    relation   go to state 35
    term       go to state 36
    factor     go to state 37
    exp_op     go to state 38
    unary_op   go to state 39
    primary    go to state 40


State 58

   31 binary_op: binary_op ANDOP • relation

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    relation  go to state 73
    term      go to state 36
    factor    go to state 37
    exp_op    go to state 38
    unary_op  go to state 39
    primary   go to state 40


State 59

   33 relation: relation RELOP • term

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    term      go to state 74
    factor    go to state 37
    exp_op    go to state 38
    unary_op  go to state 39
    primary   go to state 40


State 60

   35 term: term ADDOP • factor

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    factor    go to state 75
    exp_op    go to state 38
    unary_op  go to state 39
    primary   go to state 40


State 61

   37 factor: factor MULOP • exp_op

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    exp_op    go to state 76
    unary_op  go to state 39
    primary   go to state 40


State 62

   38 factor: factor REMOP • exp_op

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    exp_op    go to state 77
    unary_op  go to state 39
    primary   go to state 40


State 63

   42 unary_op: unary_op NOTOP • primary

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    primary  go to state 78


State 64

   40 exp_op: primary EXPOP • exp_op

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 30

    exp_op    go to state 79
    unary_op  go to state 39
    primary   go to state 40


State 65

    2 function_header: FUNCTION IDENTIFIER parameter_ RETURNS type ';' •

    $default  reduce using rule 2 (function_header)


State 66

    7 variable: IDENTIFIER ':' type IS • statement_

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    REDUCE        shift, and go to state 27
    IF            shift, and go to state 28
    CASE          shift, and go to state 29
    '('           shift, and go to state 30

    statement_  go to state 80
    statement   go to state 32
    expression  go to state 33
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 67

   19 statement: REDUCE operator reduction_ • ENDREDUCE
   27 reduction_: reduction_ • statement_

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    REDUCE        shift, and go to state 27
    ENDREDUCE     shift, and go to state 81
    IF            shift, and go to state 28
    CASE          shift, and go to state 29
    '('           shift, and go to state 30

    statement_  go to state 82
    statement   go to state 32
    expression  go to state 33
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 68

   20 statement: IF expression THEN • statement_ ELSE statement_ ENDIF

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    REDUCE        shift, and go to state 27
    IF            shift, and go to state 28
    CASE          shift, and go to state 29
    '('           shift, and go to state 30

    statement_  go to state 83
    statement   go to state 32
    expression  go to state 33
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 69

   21 statement: CASE expression IS • case_ OTHERS ARROW statement_ ENDCASE

    $default  reduce using rule 25 (case_)

    case_  go to state 84


State 70

   44 primary: '(' expression ')' •

    $default  reduce using rule 44 (primary)


State 71

   15 body: BEGIN_ statement_ END ';' •

    $default  reduce using rule 15 (body)


State 72

   29 expression: expression OROP binary_op •
   31 binary_op: binary_op • ANDOP relation

    ANDOP  shift, and go to state 58

    $default  reduce using rule 29 (expression)


State 73

   31 binary_op: binary_op ANDOP relation •
   33 relation: relation • RELOP term

    RELOP  shift, and go to state 59

    $default  reduce using rule 31 (binary_op)


State 74

   33 relation: relation RELOP term •
   35 term: term • ADDOP factor

    ADDOP  shift, and go to state 60

    $default  reduce using rule 33 (relation)


State 75

   35 term: term ADDOP factor •
   37 factor: factor • MULOP exp_op
   38       | factor • REMOP exp_op

    MULOP  shift, and go to state 61
    REMOP  shift, and go to state 62

    $default  reduce using rule 35 (term)


State 76

   37 factor: factor MULOP exp_op •

    $default  reduce using rule 37 (factor)


State 77

   38 factor: factor REMOP exp_op •

    $default  reduce using rule 38 (factor)


State 78

   42 unary_op: unary_op NOTOP primary •

    $default  reduce using rule 42 (unary_op)


State 79

   40 exp_op: primary EXPOP exp_op •

    $default  reduce using rule 40 (exp_op)


State 80

    7 variable: IDENTIFIER ':' type IS statement_ •

    $default  reduce using rule 7 (variable)


State 81

   19 statement: REDUCE operator reduction_ ENDREDUCE •

    $default  reduce using rule 19 (statement)


State 82

   27 reduction_: reduction_ statement_ •

    $default  reduce using rule 27 (reduction_)


State 83

   20 statement: IF expression THEN statement_ • ELSE statement_ ENDIF

    ELSE  shift, and go to state 85


State 84

   21 statement: CASE expression IS case_ • OTHERS ARROW statement_ ENDCASE
   24 case_: case_ • case

    WHEN    shift, and go to state 86
    OTHERS  shift, and go to state 87

    case  go to state 88


State 85

   20 statement: IF expression THEN statement_ ELSE • statement_ ENDIF

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    REDUCE        shift, and go to state 27
    IF            shift, and go to state 28
    CASE          shift, and go to state 29
    '('           shift, and go to state 30

    statement_  go to state 89
    statement   go to state 32
    expression  go to state 33
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 86

   26 case: WHEN • INT_LITERAL ARROW statement_

    INT_LITERAL  shift, and go to state 90


State 87

   21 statement: CASE expression IS case_ OTHERS • ARROW statement_ ENDCASE

    ARROW  shift, and go to state 91


State 88

   24 case_: case_ case •

    $default  reduce using rule 24 (case_)


State 89

   20 statement: IF expression THEN statement_ ELSE statement_ • ENDIF

    ENDIF  shift, and go to state 92


State 90

   26 case: WHEN INT_LITERAL • ARROW statement_

    ARROW  shift, and go to state 93


State 91

   21 statement: CASE expression IS case_ OTHERS ARROW • statement_ ENDCASE

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    REDUCE        shift, and go to state 27
    IF            shift, and go to state 28
    CASE          shift, and go to state 29
    '('           shift, and go to state 30

    statement_  go to state 94
    statement   go to state 32
    expression  go to state 33
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 92

   20 statement: IF expression THEN statement_ ELSE statement_ ENDIF •

    $default  reduce using rule 20 (statement)


State 93

   26 case: WHEN INT_LITERAL ARROW • statement_

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    REDUCE        shift, and go to state 27
    IF            shift, and go to state 28
    CASE          shift, and go to state 29
    '('           shift, and go to state 30

    statement_  go to state 95
    statement   go to state 32
    expression  go to state 33
    binary_op   go to state 34
    relation    go to state 35
    term        go to state 36
    factor      go to state 37
    exp_op      go to state 38
    unary_op    go to state 39
    primary     go to state 40


State 94

   21 statement: CASE expression IS case_ OTHERS ARROW statement_ • ENDCASE

    ENDCASE  shift, and go to state 96


State 95

   26 case: WHEN INT_LITERAL ARROW statement_ •

    $default  reduce using rule 26 (case)


State 96

   21 statement: CASE expression IS case_ OTHERS ARROW statement_ ENDCASE •

    $default  reduce using rule 21 (statement)
